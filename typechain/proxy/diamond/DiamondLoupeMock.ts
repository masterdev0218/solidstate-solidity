/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export declare namespace IDiamondCuttable {
  export type FacetCutStruct = {
    target: string;
    action: BigNumberish;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = { target: string; selectors: BytesLike[] };

  export type FacetStructOutput = [string, string[]] & {
    target: string;
    selectors: string[];
  };
}

export interface DiamondLoupeMockInterface extends utils.Interface {
  functions: {
    'facetAddress(bytes4)': FunctionFragment;
    'facetAddresses()': FunctionFragment;
    'facetFunctionSelectors(address)': FunctionFragment;
    'facets()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'facetAddress'
      | 'facetAddress(bytes4)'
      | 'facetAddresses'
      | 'facetAddresses()'
      | 'facetFunctionSelectors'
      | 'facetFunctionSelectors(address)'
      | 'facets'
      | 'facets()'
      | 'supportsInterface'
      | 'supportsInterface(bytes4)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'facetAddress',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'facetAddress(bytes4)',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'facetAddresses',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'facetAddresses()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'facetFunctionSelectors',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'facetFunctionSelectors(address)',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'facets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'facets()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface(bytes4)',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'facetAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'facetAddress(bytes4)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'facetAddresses',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'facetAddresses()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'facetFunctionSelectors',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'facetFunctionSelectors(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'facets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'facets()', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface(bytes4)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface DiamondLoupeMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondLoupeMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { facet: string }>;

    'facetAddress(bytes4)'(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { addresses: string[] }>;

    'facetAddresses()'(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { selectors: string[] }>;

    'facetFunctionSelectors(address)'(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(overrides?: CallOverrides): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        diamondFacets: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    'facets()'(overrides?: CallOverrides): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        diamondFacets: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  facetAddress(selector: BytesLike, overrides?: CallOverrides): Promise<string>;

  'facetAddress(bytes4)'(
    selector: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  'facetAddresses()'(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  'facetFunctionSelectors(address)'(
    facet: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  'facets()'(
    overrides?: CallOverrides,
  ): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'supportsInterface(bytes4)'(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'facetAddress(bytes4)'(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    'facetAddresses()'(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    'facetFunctionSelectors(address)'(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides,
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    'facets()'(
      overrides?: CallOverrides,
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'facetAddress(bytes4)'(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    'facetAddresses()'(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'facetFunctionSelectors(address)'(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    'facets()'(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    facetAddress(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'facetAddress(bytes4)'(
      selector: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'facetAddresses()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'facetFunctionSelectors(address)'(
      facet: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'facets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'supportsInterface(bytes4)'(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
