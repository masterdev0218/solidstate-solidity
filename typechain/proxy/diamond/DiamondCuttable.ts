/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../common';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export declare namespace IDiamondCuttable {
  export type FacetCutStruct = {
    target: string;
    action: BigNumberish;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export interface DiamondCuttableInterface extends utils.Interface {
  functions: {
    'diamondCut((address,uint8,bytes4[])[],address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'diamondCut'
      | 'diamondCut((address,uint8,bytes4[])[],address,bytes)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'diamondCut',
    values: [IDiamondCuttable.FacetCutStruct[], string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'diamondCut((address,uint8,bytes4[])[],address,bytes)',
    values: [IDiamondCuttable.FacetCutStruct[], string, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'diamondCut', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'diamondCut((address,uint8,bytes4[])[],address,bytes)',
    data: BytesLike,
  ): Result;

  events: {
    'DiamondCut(tuple[],address,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DiamondCut'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DiamondCut(tuple[],address,bytes)',
  ): EventFragment;
}

export interface DiamondCutEventObject {
  facetCuts: IDiamondCuttable.FacetCutStructOutput[];
  target: string;
  data: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCuttable.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface DiamondCuttable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondCuttableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'diamondCut((address,uint8,bytes4[])[],address,bytes)'(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  diamondCut(
    facetCuts: IDiamondCuttable.FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'diamondCut((address,uint8,bytes4[])[],address,bytes)'(
    facetCuts: IDiamondCuttable.FacetCutStruct[],
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'diamondCut((address,uint8,bytes4[])[],address,bytes)'(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'DiamondCut(tuple[],address,bytes)'(
      facetCuts?: null,
      target?: null,
      data?: null,
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null,
    ): DiamondCutEventFilter;
  };

  estimateGas: {
    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'diamondCut((address,uint8,bytes4[])[],address,bytes)'(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'diamondCut((address,uint8,bytes4[])[],address,bytes)'(
      facetCuts: IDiamondCuttable.FacetCutStruct[],
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
