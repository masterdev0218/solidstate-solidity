/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC1271OwnableMock,
  ERC1271OwnableMockInterface,
} from '../../../signature/ownable/ERC1271OwnableMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: '__isValidSignature',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'isValidSignature',
    outputs: [
      {
        internalType: 'bytes4',
        name: 'magicValue',
        type: 'bytes4',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161056638038061056683398101604081905261002f9161008a565b8061004261006660201b6100c31760201c565b80546001600160a01b0319166001600160a01b0392909216919091179055506100ba565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b60006020828403121561009c57600080fd5b81516001600160a01b03811681146100b357600080fd5b9392505050565b61049d806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631626ba7e1461003b57806399fcfa591461006c575b600080fd5b61004e6100493660046103ac565b61008f565b6040516001600160e01b031990911681526020015b60405180910390f35b61007f61007a3660046103ac565b6100b0565b6040519015158152602001610063565b600061009b83836100e7565b156100aa5750630b135d3f60e11b5b92915050565b60006100bc83836100e7565b9392505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b60006100f16100c3565b546001600160a01b031661015c83610156866040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9061016d565b6001600160a01b0316149392505050565b600081516041146101c55760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064015b60405180910390fd5b60208201516040830151606084015160001a6101e3868285856101ed565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561026a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016101bc565b8360ff16601b148061027f57508360ff16601c145b6102d65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016101bc565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561032a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661038d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101bc565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156103bf57600080fd5b82359150602083013567ffffffffffffffff808211156103de57600080fd5b818501915085601f8301126103f257600080fd5b81358181111561040457610404610396565b604051601f8201601f19908116603f0116810190838211818310171561042c5761042c610396565b8160405282815288602084870101111561044557600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220a7aa6bf4acf958c93a7881f03375c28401897bb8048d77895cd8753ecef4e64a64736f6c634300080a0033';

type ERC1271OwnableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1271OwnableMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1271OwnableMock__factory extends ContractFactory {
  constructor(...args: ERC1271OwnableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC1271OwnableMock> {
    return super.deploy(owner, overrides || {}) as Promise<ERC1271OwnableMock>;
  }
  override getDeployTransaction(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  override attach(address: string): ERC1271OwnableMock {
    return super.attach(address) as ERC1271OwnableMock;
  }
  override connect(signer: Signer): ERC1271OwnableMock__factory {
    return super.connect(signer) as ERC1271OwnableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1271OwnableMockInterface {
    return new utils.Interface(_abi) as ERC1271OwnableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC1271OwnableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1271OwnableMock;
  }
}
