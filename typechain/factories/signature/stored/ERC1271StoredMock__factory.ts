/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC1271StoredMock,
  ERC1271StoredMockInterface,
} from '../../../signature/stored/ERC1271StoredMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: '__isValidSignature',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bool',
        name: 'status',
        type: 'bool',
      },
    ],
    name: '__setValidSignature',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'isValidSignature',
    outputs: [
      {
        internalType: 'bytes4',
        name: 'magicValue',
        type: 'bytes4',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161034938038061034983398101604081905261002f91610088565b600161004361006460201b6100f11760201c565b60009283526020526040909120805460ff19169115159190911790556100a1565b7f2247614a8e10a8cdf7e414e8cfdd55d59e5d45963b9b0ae5cab906b23c3d0e1190565b60006020828403121561009a57600080fd5b5051919050565b610299806100b06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306a70130146100465780631626ba7e1461005b57806399fcfa591461008c575b600080fd5b61005961005436600461015d565b6100af565b005b61006e6100693660046101a8565b6100bd565b6040516001600160e01b031990911681526020015b60405180910390f35b61009f61009a3660046101a8565b6100de565b6040519015158152602001610083565b6100b98282610115565b5050565b60006100c9838361013e565b156100d85750630b135d3f60e11b5b92915050565b60006100ea838361013e565b9392505050565b7f2247614a8e10a8cdf7e414e8cfdd55d59e5d45963b9b0ae5cab906b23c3d0e1190565b8061011e6100f1565b60009384526020526040909220805460ff19169215159290921790915550565b60006101486100f1565b60009384526020525050604090205460ff1690565b6000806040838503121561017057600080fd5b823591506020830135801515811461018757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156101bb57600080fd5b82359150602083013567ffffffffffffffff808211156101da57600080fd5b818501915085601f8301126101ee57600080fd5b81358181111561020057610200610192565b604051601f8201601f19908116603f0116810190838211818310171561022857610228610192565b8160405282815288602084870101111561024157600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea2646970667358221220668ec76d2e81f9500d2a508b854ef309f54f2f2b6a842f28f6d6927a52e9491f64736f6c634300080a0033';

type ERC1271StoredMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1271StoredMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1271StoredMock__factory extends ContractFactory {
  constructor(...args: ERC1271StoredMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC1271StoredMock> {
    return super.deploy(hash, overrides || {}) as Promise<ERC1271StoredMock>;
  }
  override getDeployTransaction(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(hash, overrides || {});
  }
  override attach(address: string): ERC1271StoredMock {
    return super.attach(address) as ERC1271StoredMock;
  }
  override connect(signer: Signer): ERC1271StoredMock__factory {
    return super.connect(signer) as ERC1271StoredMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1271StoredMockInterface {
    return new utils.Interface(_abi) as ERC1271StoredMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC1271StoredMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1271StoredMock;
  }
}
