/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MerkleProofMock,
  MerkleProofMockInterface,
} from '../../cryptography/MerkleProofMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32[]',
        name: 'proof',
        type: 'bytes32[]',
      },
      {
        internalType: 'bytes32',
        name: 'root',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 'leaf',
        type: 'bytes32',
      },
    ],
    name: 'verify',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610241806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b61004361003e366004610127565b610057565b604051901515815260200160405180910390f35b600061006484848461006c565b949350505050565b600081815b855181101561010657600086828151811061008e5761008e6101f5565b602002602001015190508083116100d05760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506100fd565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50600101610071565b509092149392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561013c57600080fd5b833567ffffffffffffffff8082111561015457600080fd5b818601915086601f83011261016857600080fd5b813560208282111561017c5761017c610111565b8160051b604051601f19603f830116810181811086821117156101a1576101a1610111565b60405292835281830193508481018201928a8411156101bf57600080fd5b948201945b838610156101dd578535855294820194938201936101c4565b9a918901359950506040909701359695505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ecb76525b536a8bcca3cd64b89973c29eb51fb2f6895b753c9e83abdf29b86c264736f6c634300080a0033';

type MerkleProofMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofMock__factory extends ContractFactory {
  constructor(...args: MerkleProofMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MerkleProofMock> {
    return super.deploy(overrides || {}) as Promise<MerkleProofMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleProofMock {
    return super.attach(address) as MerkleProofMock;
  }
  override connect(signer: Signer): MerkleProofMock__factory {
    return super.connect(signer) as MerkleProofMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofMockInterface {
    return new utils.Interface(_abi) as MerkleProofMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MerkleProofMock {
    return new Contract(address, _abi, signerOrProvider) as MerkleProofMock;
  }
}
