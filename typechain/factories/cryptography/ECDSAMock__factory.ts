/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ECDSAMock,
  ECDSAMockInterface,
} from '../../cryptography/ECDSAMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'recover',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'recover',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'hash',
        type: 'bytes32',
      },
    ],
    name: 'toEthSignedMessageHash',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506104b6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806319045a2514610046578063918a15cf14610076578063c2bf17b014610097575b600080fd5b610059610054366004610369565b6100aa565b6040516001600160a01b0390911681526020015b60405180910390f35b610089610084366004610424565b6100bd565b60405190815260200161006d565b6100596100a536600461043d565b61011c565b60006100b68383610133565b9392505050565b6000610116826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b92915050565b600061012a858585856101b3565b95945050505050565b6000815160411461018b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064015b60405180910390fd5b60208201516040830151606084015160001a6101a9868285856101b3565b9695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156102305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610182565b8360ff16601b148061024557508360ff16601c145b61029c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610182565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156102f0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661012a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610182565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561037c57600080fd5b82359150602083013567ffffffffffffffff8082111561039b57600080fd5b818501915085601f8301126103af57600080fd5b8135818111156103c1576103c1610353565b604051601f8201601f19908116603f011681019083821181831017156103e9576103e9610353565b8160405282815288602084870101111561040257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561043657600080fd5b5035919050565b6000806000806080858703121561045357600080fd5b84359350602085013560ff8116811461046b57600080fd5b9396939550505050604082013591606001359056fea2646970667358221220202776cc5e4b93c435d0594de5b7522dceb6333c9b7df4d327ba83b9565705bf64736f6c634300080a0033';

type ECDSAMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAMock__factory extends ContractFactory {
  constructor(...args: ECDSAMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ECDSAMock> {
    return super.deploy(overrides || {}) as Promise<ECDSAMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ECDSAMock {
    return super.attach(address) as ECDSAMock;
  }
  override connect(signer: Signer): ECDSAMock__factory {
    return super.connect(signer) as ECDSAMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAMockInterface {
    return new utils.Interface(_abi) as ECDSAMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ECDSAMock {
    return new Contract(address, _abi, signerOrProvider) as ECDSAMock;
  }
}
