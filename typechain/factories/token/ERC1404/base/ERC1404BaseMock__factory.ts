/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC1404BaseMock,
  ERC1404BaseMockInterface,
} from '../../../../token/ERC1404/base/ERC1404BaseMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8[]',
        name: 'errorCodes',
        type: 'uint8[]',
      },
      {
        internalType: 'string[]',
        name: 'errorMessages',
        type: 'string[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: '__burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: '__mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'holder',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'detectTransferRestriction',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'restrictionCode',
        type: 'uint8',
      },
    ],
    name: 'messageForTransferRestriction',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'holder',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001272380380620012728339810160408190526200003491620003cc565b6200006482826200004f6200006c60201b620002eb1760201c565b6200009060201b6200030f179092919060201c565b5050620004f7565b7f30fbc5103dd3fe60574e239ab3dd8159b9545f7ba8dbbe0945026e3fffa33c2190565b8051825114620001165760405162461bcd60e51b815260206004820152604160248201527f455243313430343a207265737472696374696f6e436f64657320616e6420726560448201527f737472696374696f6e4d65737361676573206c656e677468206d69736d6174636064820152600d60fb1b608482015260a40160405180910390fd5b8260005b83518110156200019457828181518110620001395762000139620004a4565b6020026020010151826000868481518110620001595762000159620004a4565b602002602001015160ff1660ff16815260200190815260200160002090805190602001906200018a9291906200019b565b506001016200011a565b5050505050565b828054620001a990620004ba565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562000282576200028262000241565b604052919050565b60006001600160401b03821115620002a657620002a662000241565b5060051b60200190565b6000601f8381840112620002c357600080fd5b82516020620002dc620002d6836200028a565b62000257565b82815260059290921b85018101918181019087841115620002fc57600080fd5b8287015b84811015620003c05780516001600160401b0380821115620003225760008081fd5b818a0191508a603f830112620003385760008081fd5b85820151818111156200034f576200034f62000241565b62000362818a01601f1916880162000257565b915080825260408c818386010111156200037c5760008081fd5b60005b828110156200039c578481018201518482018a015288016200037f565b82811115620003ae5760008984860101525b50505084525091830191830162000300565b50979650505050505050565b60008060408385031215620003e057600080fd5b82516001600160401b0380821115620003f857600080fd5b818501915085601f8301126200040d57600080fd5b8151602062000420620002d6836200028a565b82815260059290921b840181019181810190898411156200044057600080fd5b948201945b838610156200047157855160ff81168114620004615760008081fd5b8252948201949082019062000445565b918801519196509093505050808211156200048b57600080fd5b506200049a85828601620002b0565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680620004cf57607f821691505b60208210811415620004f157634e487b7160e01b600052602260045260246000fd5b50919050565b610d6b80620005076000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637f4ab1dd116100665780637f4ab1dd1461011c578063a9059cbb1461013c578063aa82e0171461014f578063d4ce141514610162578063dd62ed3e1461018b57600080fd5b8063095ea7b3146100a357806318160ddd146100cb57806323b872dd146100e15780633dc8ded7146100f457806370a0823114610109575b600080fd5b6100b66100b1366004610b53565b61019e565b60405190151581526020015b60405180910390f35b6100d36101b4565b6040519081526020016100c2565b6100b66100ef366004610b7d565b6101e3565b610107610102366004610b53565b61027b565b005b6100d3610117366004610bb9565b610289565b61012f61012a366004610bd4565b6102b6565b6040516100c29190610bf7565b6100b661014a366004610b53565b6102c1565b61010761015d366004610b53565b6102ce565b610179610170366004610b7d565b50600092915050565b60405160ff90911681526020016100c2565b6100d3610199366004610c4c565b6102d8565b60006101ab33848461040b565b50600192915050565b60006101de7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b65490565b905090565b6000806101f0853361054f565b9050828110156102585760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610265853385840361040b565b610270858585610599565b506001949350505050565b6102858282610779565b5050565b6001600160a01b0381166000908152600080516020610d1683398151915260205260408120545b92915050565b60606102b082610882565b60006101ab338484610599565b6102858282610896565b60006102e4838361054f565b9392505050565b7f30fbc5103dd3fe60574e239ab3dd8159b9545f7ba8dbbe0945026e3fffa33c2190565b80518251146103905760405162461bcd60e51b815260206004820152604160248201527f455243313430343a207265737472696374696f6e436f64657320616e6420726560448201527f737472696374696f6e4d65737361676573206c656e677468206d69736d6174636064820152600d60fb1b608482015260a40161024f565b8260005b8351811015610404578281815181106103af576103af610c7f565b60200260200101518260008684815181106103cc576103cc610c7f565b602002602001015160ff1660ff16815260200190815260200160002090805190602001906103fb929190610a9e565b50600101610394565b5050505050565b6001600160a01b03831661046d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161024f565b6001600160a01b0382166104ce5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161024f565b6001600160a01b0383811660008181527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b5602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0391821660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b56020908152604080832093909416825291909152205490565b6001600160a01b0383166105fd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161024f565b6001600160a01b03821661065f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161024f565b6001600160a01b0383166000908152600080516020610d168339815191526020819052604090912054828110156106e75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161024f565b6001600160a01b0380861660009081526020849052604080822086850390559186168152908120805485929061071e908490610cab565b92505081905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161076a91815260200190565b60405180910390a35050505050565b6001600160a01b0382166107cf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161024f565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b68054600080516020610d16833981519152918391600090610812908490610cab565b90915550506001600160a01b0383166000908152602082905260408120805484929061083f908490610cab565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610542565b60606102b0826108906102eb565b906109f7565b6001600160a01b0382166108f65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161024f565b6001600160a01b0382166000908152600080516020610d1683398151915260208190526040909120548281101561097a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161024f565b6001600160a01b038416600090815260208390526040812084830390556002830180548592906109ab908490610cc3565b90915550506040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b60ff81166000908152602083905260409020805460609190610a1890610cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4490610cda565b8015610a915780601f10610a6657610100808354040283529160200191610a91565b820191906000526020600020905b815481529060010190602001808311610a7457829003601f168201915b5050505050905092915050565b828054610aaa90610cda565b90600052602060002090601f016020900481019282610acc5760008555610b12565b82601f10610ae557805160ff1916838001178555610b12565b82800160010185558215610b12579182015b82811115610b12578251825591602001919060010190610af7565b50610b1e929150610b22565b5090565b5b80821115610b1e5760008155600101610b23565b80356001600160a01b0381168114610b4e57600080fd5b919050565b60008060408385031215610b6657600080fd5b610b6f83610b37565b946020939093013593505050565b600080600060608486031215610b9257600080fd5b610b9b84610b37565b9250610ba960208501610b37565b9150604084013590509250925092565b600060208284031215610bcb57600080fd5b6102e482610b37565b600060208284031215610be657600080fd5b813560ff811681146102e457600080fd5b600060208083528351808285015260005b81811015610c2457858101830151858201604001528201610c08565b81811115610c36576000604083870101525b50601f01601f1916929092016040019392505050565b60008060408385031215610c5f57600080fd5b610c6883610b37565b9150610c7660208401610b37565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610cbe57610cbe610c95565b500190565b600082821015610cd557610cd5610c95565b500390565b600181811c90821680610cee57607f821691505b60208210811415610d0f57634e487b7160e01b600052602260045260246000fd5b5091905056fec991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b4a264697066735822122099f683eaee161a63acaa032d50a64fac77fb8c4225a95842f393d77538e02c3e64736f6c634300080a0033';

type ERC1404BaseMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1404BaseMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1404BaseMock__factory extends ContractFactory {
  constructor(...args: ERC1404BaseMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    errorCodes: BigNumberish[],
    errorMessages: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC1404BaseMock> {
    return super.deploy(
      errorCodes,
      errorMessages,
      overrides || {},
    ) as Promise<ERC1404BaseMock>;
  }
  override getDeployTransaction(
    errorCodes: BigNumberish[],
    errorMessages: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      errorCodes,
      errorMessages,
      overrides || {},
    );
  }
  override attach(address: string): ERC1404BaseMock {
    return super.attach(address) as ERC1404BaseMock;
  }
  override connect(signer: Signer): ERC1404BaseMock__factory {
    return super.connect(signer) as ERC1404BaseMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1404BaseMockInterface {
    return new utils.Interface(_abi) as ERC1404BaseMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC1404BaseMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1404BaseMock;
  }
}
