/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC721EnumerableMock,
  ERC721EnumerableMockInterface,
} from '../../../../token/ERC721/enumerable/ERC721EnumerableMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'approved',
        type: 'bool',
      },
    ],
    name: 'ApprovalForAll',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'getApproved',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'isApprovedForAll',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'ownerOf',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'safeTransferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'status',
        type: 'bool',
      },
    ],
    name: 'setApprovalForAll',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
    ],
    name: 'tokenByIndex',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506118f3806100206000396000f3fe6080604052600436106100e85760003560e01c806342842e0e1161008a57806370a082311161005957806370a0823114610258578063a22cb46514610278578063b88d4fde14610298578063e985e9c5146102ab57600080fd5b806342842e0e146101e557806342966c68146101f85780634f6ccce7146102185780636352211e1461023857600080fd5b806318160ddd116100c657806318160ddd1461016f57806323b872dd146101925780632f745c59146101a557806340c10f19146101c557600080fd5b806301ffc9a7146100ed578063081812fc14610122578063095ea7b31461015a575b600080fd5b3480156100f957600080fd5b5061010d6101083660046114da565b6102cb565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d3660046114f7565b61030e565b6040516001600160a01b039091168152602001610119565b61016d61016836600461152c565b610319565b005b34801561017b57600080fd5b50610184610434565b604051908152602001610119565b61016d6101a0366004611556565b610443565b3480156101b157600080fd5b506101846101c036600461152c565b610474565b3480156101d157600080fd5b5061016d6101e036600461152c565b610487565b61016d6101f3366004611556565b610495565b34801561020457600080fd5b5061016d6102133660046114f7565b6104b0565b34801561022457600080fd5b506101846102333660046114f7565b6104bc565b34801561024457600080fd5b506101426102533660046114f7565b6104c7565b34801561026457600080fd5b50610184610273366004611592565b6104d2565b34801561028457600080fd5b5061016d6102933660046115ad565b6104dd565b61016d6102a63660046115ff565b6105c1565b3480156102b757600080fd5b5061010d6102c63660046116db565b6105f9565b6001600160e01b0319811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff165b92915050565b600061030882610605565b6000610324826104c7565b9050806001600160a01b0316836001600160a01b031614156103975760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103b357506103b381336105f9565b6104255760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161038e565b61042f838361069e565b505050565b600061043e61072b565b905090565b61044d3382610744565b6104695760405162461bcd60e51b815260040161038e9061170e565b61042f838383610814565b600061048083836109c6565b9392505050565b61049182826109e1565b5050565b61042f838383604051806020016040528060008152506105c1565b6104b981610b0b565b50565b600061030882610bbd565b600061030882610bd7565b600061030882610c42565b6001600160a01b0382163314156105365760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161038e565b3360008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6105cb3383610744565b6105e75760405162461bcd60e51b815260040161038e9061170e565b6105f384848484610ced565b50505050565b60006104808383610d6b565b600060008051602061189e8339815191526106208184610db8565b6106815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161038e565b60009283526003016020525060409020546001600160a01b031690565b60008181527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a96020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106f282610bd7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061043e60008051602061189e833981519152610dc4565b600061075e60008051602061189e83398151915283610db8565b6107b65760405162461bcd60e51b815260206004820152602360248201527f4552433732313a20717565727920666f72206e6f6e6578697374656e7420746f60448201526235b2b760e91b606482015260840161038e565b60006107c183610bd7565b9050806001600160a01b0316846001600160a01b031614806107fc5750836001600160a01b03166107f184610605565b6001600160a01b0316145b8061080c575061080c8185610d6b565b949350505050565b826001600160a01b031661082782610bd7565b6001600160a01b03161461088f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161038e565b6001600160a01b0382166108f15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161038e565b6108fc60008261069e565b6001600160a01b03831660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061189e8339815191529061094d9083610dcf565b506001600160a01b038316600090815260028201602052604090206109729083610ddb565b5061097e818385610de7565b5081836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b600061048060008051602061189e8339815191528484610dfd565b6001600160a01b038216610a375760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161038e565b60008051602061189e833981519152610a508183610db8565b15610a9d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161038e565b6001600160a01b03831660009081526002820160205260409020610ac19083610ddb565b50610acd818385610de7565b5060405182906001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b6000610b1682610bd7565b9050610b2360008361069e565b6001600160a01b03811660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902060008051602061189e83398151915290610b749084610dcf565b50610b7f8184610e21565b5060405183906000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b600061030860008051602061189e83398151915283610e2d565b600080610bf260008051602061189e83398151915284610e43565b90506001600160a01b0381166103085760405162461bcd60e51b815260206004820152601560248201527422a9219b99189d1034b73b30b634b21037bbb732b960591b604482015260640161038e565b60006001600160a01b038216610cad5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161038e565b6001600160a01b03821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a86020526040902061030890610e4f565b610cf8848484610814565b610d0484848484610e59565b6105f35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161038e565b6001600160a01b0391821660009081527f3c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07aa6020908152604080832093909416825291909152205460ff1690565b60006104808383610f2a565b600061030882610e4f565b60006104808383610f42565b6000610480838361100f565b600061080c84846001600160a01b03851661105e565b6001600160a01b0382166000908152600284016020526040812061080c90836110fb565b60006104808383611107565b600080610e3a84846111e5565b50949350505050565b60006104808383611201565b6000610308825490565b60006001600160a01b0384163b610e725750600161080c565b6000610ef363150b7a0260e01b33888787604051602401610e9694939291906117b6565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505060405180606001604052806032815260200161186c603291396001600160a01b0388169190611292565b9050600081806020019051810190610f0b91906117f3565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60008181526001830160205260408120541515610480565b6000818152600183016020526040812054801561100557835460009085906000198101908110610f7457610f74611810565b9060005260206000200154905080856000016001840381548110610f9a57610f9a611810565b6000918252602080832090910192909255918252600186019052604090208190558354849080610fcc57610fcc611826565b60019003818190600052602060002001600090559055836001016000848152602001908152602001600020600090556001915050610308565b6000915050610308565b600081815260018301602052604081205461105657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610308565b506000610308565b6000828152600184016020526040812054806110c3575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055610480565b828560000160018303815481106110dc576110dc611810565b9060005260206000209060020201600101819055506000915050610480565b600061048083836112a1565b600081815260018301602052604081205480156110055783546000908590600019810190811061113957611139611810565b906000526020600020906002020190508085600001600184038154811061116257611162611810565b60009182526020808320845460029093020191825560019384015491840191909155925481529086019091526040902081905583548490806111a6576111a6611826565b60008281526020808220600260001990940193840201828155600190810183905592909355858152868201909252604082209190915591506103089050565b60008080806111f48686611327565b9097909650945050505050565b60008181526001830160205260408120548061125f5760405162461bcd60e51b815260206004820152601e60248201527f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000604482015260640161038e565b83600001600182038154811061127757611277611810565b90600052602060002090600202016001015491505092915050565b606061080c84846000856113c4565b815460009082106112ff5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161038e565b82600001828154811061131457611314611810565b9060005260206000200154905092915050565b8154600090819083106113875760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161038e565b600084600001848154811061139e5761139e611810565b906000526020600020906002020190508060000154816001015492509250509250929050565b6060843b6114285760405162461bcd60e51b815260206004820152602b60248201527f416464726573735574696c733a2066756e6374696f6e2063616c6c20746f206e60448201526a1bdb8b58dbdb9d1c9858dd60aa1b606482015260840161038e565b600080866001600160a01b03168587604051611444919061183c565b60006040518083038185875af1925050503d8060008114611481576040519150601f19603f3d011682016040523d82523d6000602084013e611486565b606091505b5091509150811561149a57915061080c9050565b8051156114aa5780518082602001fd5b8360405162461bcd60e51b815260040161038e9190611858565b6001600160e01b0319811681146104b957600080fd5b6000602082840312156114ec57600080fd5b8135610480816114c4565b60006020828403121561150957600080fd5b5035919050565b80356001600160a01b038116811461152757600080fd5b919050565b6000806040838503121561153f57600080fd5b61154883611510565b946020939093013593505050565b60008060006060848603121561156b57600080fd5b61157484611510565b925061158260208501611510565b9150604084013590509250925092565b6000602082840312156115a457600080fd5b61048082611510565b600080604083850312156115c057600080fd5b6115c983611510565b9150602083013580151581146115de57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561161557600080fd5b61161e85611510565b935061162c60208601611510565b925060408501359150606085013567ffffffffffffffff8082111561165057600080fd5b818701915087601f83011261166457600080fd5b813581811115611676576116766115e9565b604051601f8201601f19908116603f0116810190838211818310171561169e5761169e6115e9565b816040528281528a60208487010111156116b757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156116ee57600080fd5b6116f783611510565b915061170560208401611510565b90509250929050565b60208082526030908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60408201526f1ddb995c881bdc88185c1c1c9bdd995960821b606082015260800190565b60005b83811015611779578181015183820152602001611761565b838111156105f35750506000910152565b600081518084526117a281602086016020860161175e565b601f01601f19169290920160200192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117e99083018461178a565b9695505050505050565b60006020828403121561180557600080fd5b8151610480816114c4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000825161184e81846020870161175e565b9190910192915050565b602081526000610480602083018461178a56fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465723c7bf052874fa81625121783266a03507bd2cd48b16e571c01a04e8dd3fb07a6a2646970667358221220d4887d9ac6f4500d37f9443cd6fb0df77257bca320ec5862ed70ff7db8875c3264736f6c634300080a0033';

type ERC721EnumerableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721EnumerableMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721EnumerableMock__factory extends ContractFactory {
  constructor(...args: ERC721EnumerableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC721EnumerableMock> {
    return super.deploy(overrides || {}) as Promise<ERC721EnumerableMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721EnumerableMock {
    return super.attach(address) as ERC721EnumerableMock;
  }
  override connect(signer: Signer): ERC721EnumerableMock__factory {
    return super.connect(signer) as ERC721EnumerableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721EnumerableMockInterface {
    return new utils.Interface(_abi) as ERC721EnumerableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC721EnumerableMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as ERC721EnumerableMock;
  }
}
