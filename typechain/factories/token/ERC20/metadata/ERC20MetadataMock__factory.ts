/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC20MetadataMock,
  ERC20MetadataMockInterface,
} from '../../../../token/ERC20/metadata/ERC20MetadataMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'decimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161065538038061065583398101604081905261002f91610257565b600061004361009360201b6100a91760201c565b905061005c84826100b760201b6100cd1790919060201c565b61007383826100ce60201b6100e41790919060201c565b61008a82826100e360201b6100f91790919060201c565b5050505061030f565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b80516100c990839060208401906100fc565b505050565b80516100c990600184019060208401906100fc565b600291909101805460ff191660ff909216919091179055565b828054610108906102d4565b90600052602060002090601f01602090048101928261012a5760008555610170565b82601f1061014357805160ff1916838001178555610170565b82800160010185558215610170579182015b82811115610170578251825591602001919060010190610155565b5061017c929150610180565b5090565b5b8082111561017c5760008155600101610181565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101bc57600080fd5b81516001600160401b03808211156101d6576101d6610195565b604051601f8301601f19908116603f011681019082821181831017156101fe576101fe610195565b8160405283815260209250868385880101111561021a57600080fd5b600091505b8382101561023c578582018301518183018401529082019061021f565b8382111561024d5760008385830101525b9695505050505050565b60008060006060848603121561026c57600080fd5b83516001600160401b038082111561028357600080fd5b61028f878388016101ab565b945060208601519150808211156102a557600080fd5b506102b2868287016101ab565b925050604084015160ff811681146102c957600080fd5b809150509250925092565b600181811c908216806102e857607f821691505b6020821081141561030957634e487b7160e01b600052602260045260246000fd5b50919050565b6103378061031e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde0314610046578063313ce5671461006457806395d89b411461007e575b600080fd5b61004e610086565b60405161005b9190610271565b60405180910390f35b61006c610095565b60405160ff909116815260200161005b565b61004e61009f565b6060610090610112565b905090565b60006100906101aa565b60606100906101c0565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b80516100df90839060208401906101d8565b505050565b80516100df90600184019060208401906101d8565b600291909101805460ff191660ff909216919091179055565b606061011c6100a9565b8054610127906102c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610153906102c6565b80156101a05780601f10610175576101008083540402835291602001916101a0565b820191906000526020600020905b81548152906001019060200180831161018357829003601f168201915b5050505050905090565b60006101b46100a9565b6002015460ff16919050565b60606101ca6100a9565b6001018054610127906102c6565b8280546101e4906102c6565b90600052602060002090601f016020900481019282610206576000855561024c565b82601f1061021f57805160ff191683800117855561024c565b8280016001018555821561024c579182015b8281111561024c578251825591602001919060010190610231565b5061025892915061025c565b5090565b5b80821115610258576000815560010161025d565b600060208083528351808285015260005b8181101561029e57858101830151858201604001528201610282565b818111156102b0576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102da57607f821691505b602082108114156102fb57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220e8367b599aa36a4b743193bca14d82819824b8f0cfc7d81adba0408f45d1825764736f6c634300080a0033';

type ERC20MetadataMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MetadataMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20MetadataMock__factory extends ContractFactory {
  constructor(...args: ERC20MetadataMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC20MetadataMock> {
    return super.deploy(
      name,
      symbol,
      decimals,
      overrides || {},
    ) as Promise<ERC20MetadataMock>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, decimals, overrides || {});
  }
  override attach(address: string): ERC20MetadataMock {
    return super.attach(address) as ERC20MetadataMock;
  }
  override connect(signer: Signer): ERC20MetadataMock__factory {
    return super.connect(signer) as ERC20MetadataMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MetadataMockInterface {
    return new utils.Interface(_abi) as ERC20MetadataMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC20MetadataMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20MetadataMock;
  }
}
