/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC20ImplicitApprovalMock,
  ERC20ImplicitApprovalMockInterface,
} from '../../../../token/ERC20/implicit_approval/ERC20ImplicitApprovalMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'approvedAccounts',
        type: 'address[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: '__burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: '__isImplicitlyApproved',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: '__mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'holder',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'holder',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000cfc38038062000cfc83398101604081905262000034916200011e565b60006200004b620000c760201b620002a71760201c565b905060005b8251811015620000be576001826000016000858481518110620000775762000077620001f0565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000b58162000206565b91505062000050565b50505062000230565b7fe076a236189d11087e6f258f7a69f2a5a83c9b57f620c90fb346111bfd9ecf7e90565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200011957600080fd5b919050565b600060208083850312156200013257600080fd5b82516001600160401b03808211156200014a57600080fd5b818501915085601f8301126200015f57600080fd5b815181811115620001745762000174620000eb565b8060051b604051601f19603f830116810181811085821117156200019c576200019c620000eb565b604052918252848201925083810185019188831115620001bb57600080fd5b938501935b82851015620001e457620001d48562000101565b84529385019392850192620001c0565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200022957634e487b7160e01b600052601160045260246000fd5b5060010190565b610abc80620002406000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806370a082311161006657806370a08231146100fe578063a9059cbb14610111578063aa82e01714610124578063d592f3a714610137578063dd62ed3e1461014a57600080fd5b8063095ea7b31461009857806318160ddd146100c057806323b872dd146100d65780633dc8ded7146100e9575b600080fd5b6100ab6100a636600461096d565b61015d565b60405190151581526020015b60405180910390f35b6100c8610174565b6040519081526020016100b7565b6100ab6100e4366004610997565b6101a3565b6100fc6100f736600461096d565b6101db565b005b6100c861010c3660046109d3565b6101e9565b6100ab61011f36600461096d565b610214565b6100fc61013236600461096d565b610221565b6100ab6101453660046109d3565b61022b565b6100c86101583660046109ee565b610236565b600061016a3384846102cb565b5060015b92915050565b600061019e7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b65490565b905090565b60006101ae33610414565b156101c6576101be848484610440565b5060016101d4565b6101d1848484610620565b90505b9392505050565b6101e582826106e7565b5050565b6001600160a01b0381166000908152600080516020610a67833981519152602052604081205461016e565b600061016a338484610440565b6101e582826107f0565b600061016e82610414565b600061024182610414565b1561024f575060001961016e565b6102a083836001600160a01b0380831660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b5602090815260408083209385168352929052908120546101d4565b905061016e565b7fe076a236189d11087e6f258f7a69f2a5a83c9b57f620c90fb346111bfd9ecf7e90565b6001600160a01b0383166103325760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b0382166103935760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610329565b6001600160a01b0383811660008181527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b5602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061041e6102a7565b6001600160a01b03909216600090815260209290925250604090205460ff1690565b6001600160a01b0383166104a45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610329565b6001600160a01b0382166105065760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610329565b6001600160a01b0383166000908152600080516020610a6783398151915260208190526040909120548281101561058e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610329565b6001600160a01b038086166000908152602084905260408082208685039055918616815290812080548592906105c5908490610a37565b92505081905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161061191815260200190565b60405180910390a35050505050565b6001600160a01b03831660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b560209081526040808320338452909152812054828110156106c45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610329565b6106d185338584036102cb565b6106dc858585610440565b506001949350505050565b6001600160a01b03821661073d5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610329565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b68054600080516020610a67833981519152918391600090610780908490610a37565b90915550506001600160a01b038316600090815260208290526040812080548492906107ad908490610a37565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610407565b6001600160a01b0382166108505760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610329565b6001600160a01b0382166000908152600080516020610a678339815191526020819052604090912054828110156108d45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610329565b6001600160a01b03841660009081526020839052604081208483039055600283018054859290610905908490610a4f565b90915550506040518381526000906001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b80356001600160a01b038116811461096857600080fd5b919050565b6000806040838503121561098057600080fd5b61098983610951565b946020939093013593505050565b6000806000606084860312156109ac57600080fd5b6109b584610951565b92506109c360208501610951565b9150604084013590509250925092565b6000602082840312156109e557600080fd5b6101d482610951565b60008060408385031215610a0157600080fd5b610a0a83610951565b9150610a1860208401610951565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a4a57610a4a610a21565b500190565b600082821015610a6157610a61610a21565b50039056fec991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b4a264697066735822122085f60e958920eac03002ed0fbcbcf74882ca39a22b56af889e27cb87f027c5d364736f6c634300080a0033';

type ERC20ImplicitApprovalMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ImplicitApprovalMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20ImplicitApprovalMock__factory extends ContractFactory {
  constructor(...args: ERC20ImplicitApprovalMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    approvedAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC20ImplicitApprovalMock> {
    return super.deploy(
      approvedAccounts,
      overrides || {},
    ) as Promise<ERC20ImplicitApprovalMock>;
  }
  override getDeployTransaction(
    approvedAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(approvedAccounts, overrides || {});
  }
  override attach(address: string): ERC20ImplicitApprovalMock {
    return super.attach(address) as ERC20ImplicitApprovalMock;
  }
  override connect(signer: Signer): ERC20ImplicitApprovalMock__factory {
    return super.connect(signer) as ERC20ImplicitApprovalMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ImplicitApprovalMockInterface {
    return new utils.Interface(_abi) as ERC20ImplicitApprovalMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC20ImplicitApprovalMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as ERC20ImplicitApprovalMock;
  }
}
