/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MulticallMock,
  MulticallMockInterface,
} from '../../utils/MulticallMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [],
    name: 'callRevertTest',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'callTest',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'data',
        type: 'bytes[]',
      },
    ],
    name: 'multicall',
    outputs: [
      {
        internalType: 'bytes[]',
        name: 'results',
        type: 'bytes[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506103a4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806321615e9c146100465780633c6768451461005a578063ac9650d814610064575b600080fd5b604051600181526020015b60405180910390f35b610062610084565b005b6100776100723660046101d4565b6100b9565b6040516100519190610249565b60405162461bcd60e51b81526020600482015260066024820152651c995d995c9d60d21b604482015260640160405180910390fd5b60608167ffffffffffffffff8111156100d4576100d46102e4565b60405190808252806020026020018201604052801561010757816020015b60608152602001906001900390816100f25790505b50905060005b828110156101cd576000803086868581811061012b5761012b6102fa565b905060200281019061013d9190610310565b60405161014b92919061035e565b600060405180830381855af49150503d8060008114610186576040519150601f19603f3d011682016040523d82523d6000602084013e61018b565b606091505b509150915081156101b957808484815181106101a9576101a96102fa565b60200260200101819052506101c3565b3d6000803e3d6000fd5b505060010161010d565b5092915050565b600080602083850312156101e757600080fd5b823567ffffffffffffffff808211156101ff57600080fd5b818501915085601f83011261021357600080fd5b81358181111561022257600080fd5b8660208260051b850101111561023757600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156102d657888603603f1901855282518051808852835b818110156102a6578281018a01518982018b0152890161028b565b818111156102b657848a838b0101525b50601f01601f191696909601870195509386019391860191600101610271565b509398975050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261032757600080fd5b83018035915067ffffffffffffffff82111561034257600080fd5b60200191503681900382131561035757600080fd5b9250929050565b818382376000910190815291905056fea26469706673582212207b0630e58c15e26d82054e957e090d828dda1ce4e7c34f4e3a72d15831a59c5a64736f6c634300080a0033';

type MulticallMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MulticallMock__factory extends ContractFactory {
  constructor(...args: MulticallMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MulticallMock> {
    return super.deploy(overrides || {}) as Promise<MulticallMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MulticallMock {
    return super.attach(address) as MulticallMock;
  }
  override connect(signer: Signer): MulticallMock__factory {
    return super.connect(signer) as MulticallMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallMockInterface {
    return new utils.Interface(_abi) as MulticallMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MulticallMock {
    return new Contract(address, _abi, signerOrProvider) as MulticallMock;
  }
}
