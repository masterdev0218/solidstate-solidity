/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  UintUtilsMock,
  UintUtilsMockInterface,
} from '../../utils/UintUtilsMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'toHexString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'toHexString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'number',
        type: 'uint256',
      },
    ],
    name: 'toString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610554806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806363e1cbea146100465780636900a3ae1461006f5780638fba8d5c14610082575b600080fd5b6100596100543660046103a5565b610095565b60405161006691906103c7565b60405180910390f35b61005961007d36600461041c565b6100a8565b61005961009036600461041c565b6100b9565b60606100a183836100c4565b9392505050565b60606100b382610255565b92915050565b60606100b38261035b565b606060006100d383600261044b565b6100de90600261046a565b67ffffffffffffffff8111156100f6576100f6610482565b6040519080825280601f01601f191660200182016040528015610120576020820181803683370190505b509050600360fc1b8160008151811061013b5761013b610498565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061016a5761016a610498565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156101f7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106101ba576101ba610498565b1a60f81b8282815181106101d0576101d0610498565b60200101906001600160f81b031916908160001a90535060049490941c9360001901610189565b5083156100a15760405162461bcd60e51b815260206004820152602260248201527f55696e745574696c733a20686578206c656e67746820696e73756666696369656044820152611b9d60f21b606482015260840160405180910390fd5b6060816102795750506040805180820190915260018152600360fc1b602082015290565b8160005b81156102a3578061028d816104ae565b915061029c9050600a836104df565b915061027d565b60008167ffffffffffffffff8111156102be576102be610482565b6040519080825280601f01601f1916602001820160405280156102e8576020820181803683370190505b5090505b8415610353576102fd6001836104f3565b915061030a600a8661050a565b61031590603061046a565b60f81b81838151811061032a5761032a610498565b60200101906001600160f81b031916908160001a90535061034c600a866104df565b94506102ec565b949350505050565b6060816103825750506040805180820190915260048152630307830360e41b602082015290565b6000825b801561039a5760019091019060081c610386565b506100a183826100c4565b600080604083850312156103b857600080fd5b50508035926020909101359150565b600060208083528351808285015260005b818110156103f4578581018301518582016040015282016103d8565b81811115610406576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561042e57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561046557610465610435565b500290565b6000821982111561047d5761047d610435565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156104c2576104c2610435565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826104ee576104ee6104c9565b500490565b60008282101561050557610505610435565b500390565b600082610519576105196104c9565b50069056fea264697066735822122021372ce167885ce44bf80ed6207b8f21a574d46e8d7dceb1140e0f6ba796059c64736f6c634300080a0033';

type UintUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UintUtilsMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UintUtilsMock__factory extends ContractFactory {
  constructor(...args: UintUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<UintUtilsMock> {
    return super.deploy(overrides || {}) as Promise<UintUtilsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UintUtilsMock {
    return super.attach(address) as UintUtilsMock;
  }
  override connect(signer: Signer): UintUtilsMock__factory {
    return super.connect(signer) as UintUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UintUtilsMockInterface {
    return new utils.Interface(_abi) as UintUtilsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): UintUtilsMock {
    return new Contract(address, _abi, signerOrProvider) as UintUtilsMock;
  }
}
