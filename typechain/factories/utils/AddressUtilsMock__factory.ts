/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  AddressUtilsMock,
  AddressUtilsMockInterface,
} from '../../utils/AddressUtilsMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
      {
        internalType: 'string',
        name: 'error',
        type: 'string',
      },
    ],
    name: 'functionCall',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'functionCall',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'functionCallWithValue',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'string',
        name: 'error',
        type: 'string',
      },
    ],
    name: 'functionCallWithValue',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'isContract',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address payable',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'sendValue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'toString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610a17806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80632a0115941161005b5780632a011594146100df57806356ca623e146100f2578063a0b5ffb014610105578063d525ab8a1461011857600080fd5b80631627905514610082578063241b5886146100aa57806324a084df146100ca575b600080fd5b610095610090366004610617565b61012b565b60405190151581526020015b60405180910390f35b6100bd6100b83660046106d7565b610141565b6040516100a191906107a9565b6100dd6100d83660046107bc565b61015f565b005b6100bd6100ed3660046107e8565b610176565b6100bd610100366004610617565b61018c565b6100bd610113366004610841565b6101a0565b6100bd610126366004610891565b6101bc565b60006001600160a01b0382163b15155b92915050565b60606101576001600160a01b03851684846101dc565b949350505050565b6101726001600160a01b038316826101eb565b5050565b60606101576001600160a01b03851684846102a3565b606061013b826001600160a01b03166102c9565b60606101b56001600160a01b038416836102df565b9392505050565b60606101d36001600160a01b038616858585610304565b95945050505050565b60606101578484600085610372565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610238576040519150601f19603f3d011682016040523d82523d6000602084013e61023d565b606091505b505090508061029e5760405162461bcd60e51b815260206004820152602260248201527f416464726573735574696c733a206661696c656420746f2073656e642076616c604482015261756560f01b60648201526084015b60405180910390fd5b505050565b60606101578484846040518060600160405280602e8152602001610991602e9139610304565b606061013b6001600160a01b0383166014610472565b60606101b583836040518060600160405280602381526020016109bf602391396101dc565b60608247101561036a5760405162461bcd60e51b815260206004820152602b60248201527f416464726573735574696c733a20696e73756666696369656e742062616c616e60448201526a18d948199bdc8818d85b1b60aa1b6064820152608401610295565b6101d3858585855b6060843b6103d65760405162461bcd60e51b815260206004820152602b60248201527f416464726573735574696c733a2066756e6374696f6e2063616c6c20746f206e60448201526a1bdb8b58dbdb9d1c9858dd60aa1b6064820152608401610295565b600080866001600160a01b031685876040516103f29190610911565b60006040518083038185875af1925050503d806000811461042f576040519150601f19603f3d011682016040523d82523d6000602084013e610434565b606091505b509150915081156104485791506101579050565b8051156104585780518082602001fd5b8360405162461bcd60e51b815260040161029591906107a9565b60606000610481836002610943565b61048c906002610962565b67ffffffffffffffff8111156104a4576104a4610634565b6040519080825280601f01601f1916602001820160405280156104ce576020820181803683370190505b509050600360fc1b816000815181106104e9576104e961097a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106105185761051861097a565b60200101906001600160f81b031916908160001a905350600160028402015b60018111156105a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106105685761056861097a565b1a60f81b82828151811061057e5761057e61097a565b60200101906001600160f81b031916908160001a90535060049490941c9360001901610537565b5083156101b55760405162461bcd60e51b815260206004820152602260248201527f55696e745574696c733a20686578206c656e67746820696e73756666696369656044820152611b9d60f21b6064820152608401610295565b6001600160a01b038116811461061457600080fd5b50565b60006020828403121561062957600080fd5b81356101b5816105ff565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261065b57600080fd5b813567ffffffffffffffff8082111561067657610676610634565b604051601f8301601f19908116603f0116810190828211818310171561069e5761069e610634565b816040528381528660208588010111156106b757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156106ec57600080fd5b83356106f7816105ff565b9250602084013567ffffffffffffffff8082111561071457600080fd5b6107208783880161064a565b9350604086013591508082111561073657600080fd5b506107438682870161064a565b9150509250925092565b60005b83811015610768578181015183820152602001610750565b83811115610777576000848401525b50505050565b6000815180845261079581602086016020860161074d565b601f01601f19169290920160200192915050565b6020815260006101b5602083018461077d565b600080604083850312156107cf57600080fd5b82356107da816105ff565b946020939093013593505050565b6000806000606084860312156107fd57600080fd5b8335610808816105ff565b9250602084013567ffffffffffffffff81111561082457600080fd5b6108308682870161064a565b925050604084013590509250925092565b6000806040838503121561085457600080fd5b823561085f816105ff565b9150602083013567ffffffffffffffff81111561087b57600080fd5b6108878582860161064a565b9150509250929050565b600080600080608085870312156108a757600080fd5b84356108b2816105ff565b9350602085013567ffffffffffffffff808211156108cf57600080fd5b6108db8883890161064a565b94506040870135935060608701359150808211156108f857600080fd5b506109058782880161064a565b91505092959194509250565b6000825161092381846020870161074d565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561095d5761095d61092d565b500290565b600082198211156109755761097561092d565b500190565b634e487b7160e01b600052603260045260246000fdfe416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6c20776974682076616c7565416464726573735574696c733a206661696c6564206c6f772d6c6576656c2063616c6ca264697066735822122062012b07fe941035cd4dbb734070b43a4ad87facf17dda3f1a90e5da48a66c5264736f6c634300080a0033';

type AddressUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressUtilsMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressUtilsMock__factory extends ContractFactory {
  constructor(...args: AddressUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<AddressUtilsMock> {
    return super.deploy(overrides || {}) as Promise<AddressUtilsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AddressUtilsMock {
    return super.attach(address) as AddressUtilsMock;
  }
  override connect(signer: Signer): AddressUtilsMock__factory {
    return super.connect(signer) as AddressUtilsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressUtilsMockInterface {
    return new utils.Interface(_abi) as AddressUtilsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): AddressUtilsMock {
    return new Contract(address, _abi, signerOrProvider) as AddressUtilsMock;
  }
}
