/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { MathMock, MathMockInterface } from '../../utils/MathMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'a',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'b',
        type: 'uint256',
      },
    ],
    name: 'average',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'x',
        type: 'uint256',
      },
    ],
    name: 'sqrt',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506101c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632b7423ab1461003b578063677342ce14610060575b600080fd5b61004e61004936600461010e565b610073565b60405190815260200160405180910390f35b61004e61006e366004610130565b610086565b600061007f8383610097565b9392505050565b6000610091826100c6565b92915050565b600060016100a9838216858316610149565b901c6100bc600184811c9086901c610149565b61007f9190610149565b60008060016100d58482610149565b901c90508291505b81811015610108579050806001816100f5818661016f565b6100ff9190610149565b901c90506100dd565b50919050565b6000806040838503121561012157600080fd5b50508035926020909101359150565b60006020828403121561014257600080fd5b5035919050565b6000821982111561016a57634e487b7160e01b600052601160045260246000fd5b500190565b60008261018c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d321cd083ee8f72acd9d4884bf1795fba73805f94bf5656ff4d84c4b9f409ba364736f6c634300080a0033';

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MathMock> {
    return super.deploy(overrides || {}) as Promise<MathMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathMock {
    return super.attach(address) as MathMock;
  }
  override connect(signer: Signer): MathMock__factory {
    return super.connect(signer) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new utils.Interface(_abi) as MathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MathMock {
    return new Contract(address, _abi, signerOrProvider) as MathMock;
  }
}
