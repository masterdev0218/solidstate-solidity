/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  DiamondCuttableMock,
  DiamondCuttableMockInterface,
} from '../../../proxy/diamond/DiamondCuttableMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'target',
            type: 'address',
          },
          {
            internalType: 'enum IDiamondCuttable.FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'selectors',
            type: 'bytes4[]',
          },
        ],
        indexed: false,
        internalType: 'struct IDiamondCuttable.FacetCut[]',
        name: 'facetCuts',
        type: 'tuple[]',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'DiamondCut',
    type: 'event',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'target',
            type: 'address',
          },
          {
            internalType: 'enum IDiamondCuttable.FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'selectors',
            type: 'bytes4[]',
          },
        ],
        internalType: 'struct IDiamondCuttable.FacetCut[]',
        name: 'facetCuts',
        type: 'tuple[]',
      },
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'diamondCut',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5062000040336200002c620000a160201b620002da1760201c565b620000c560201b620002fe1790919060201c565b620000786301ffc9a760e01b600162000063620000e260201b6200031b1760201c565b6200010660201b6200033f179092919060201c565b6200009b6307e4c70760e21b600162000063620000e260201b6200031b1760201c565b62000193565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415620001655760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b61129e80620001a36000396000f3fe60806040526004361061002d5760003560e01c806301ffc9a7146100cf5780631f931c1c1461010357610034565b3661003457005b600061003e610125565b90506001600160a01b0381163b6100ab5760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100ca573d6000f35b3d6000fd5b3480156100db57600080fd5b506100ef6100ea366004610d8d565b6101e8565b604051901515815260200160405180910390f35b34801561010f57600080fd5b5061012361011e366004610e08565b61021d565b005b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9360208190526040822054819060601c806101e1575060038201546001600160a01b0316806101e15760405162461bcd60e51b815260206004820152603260248201527f4469616d6f6e64426173653a206e6f20666163657420666f756e6420666f722060448201527166756e6374696f6e207369676e617475726560701b60648201526084016100a2565b9392505050565b6000610217826101f661031b565b906001600160e01b0319166000908152602091909152604090205460ff1690565b92915050565b6102256102da565b546001600160a01b0316331461027d5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100a2565b6102d361028a8587610f4e565b8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506102cb92506103c7915050565b9291906103eb565b5050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b031980831614156103995760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016100a2565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600184015461ffff81169081906000906007161561041b5750600381901c60009081526002870160205260409020545b60005b865181101561053e57600087828151811061043b5761043b611082565b602002602001015190506000816020015190506000826040015151116104af5760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a206e6f2073656c6563746f7273207370656369666044820152621a595960ea1b60648201526084016100a2565b60008160028111156104c3576104c3611098565b14156104df576104d58a8686856105ca565b9095509350610534565b60018160028111156104f3576104f3611098565b1415610508576105038a8361077d565b610534565b600281600281111561051c5761051c611098565b14156105345761052e8a86868561096e565b90955093505b505060010161041e565b5082821461055a5760018701805461ffff191661ffff84161790555b600782161561057c57600382901c600090815260028801602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738686866040516105af9392919061110a565b60405180910390a16105c18585610c00565b50505050505050565b805160009081906001600160a01b03163014806105f1575082516001600160a01b03163b15155b6106495760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a204144442074617267657420686173206e6f20636044820152626f646560e81b60648201526084016100a2565b60005b8360400151518110156107705760008460400151828151811061067157610671611082565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156106f85760405162461bcd60e51b815260206004820152602360248201527f4469616d6f6e64426173653a2073656c6563746f7220616c726561647920616460448201526219195960ea1b60648201526084016100a2565b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c1999909916179781141561076157600389901c600090815260028b0160205260408120989098555b5050506001958601950161064c565b5093959294509192505050565b80516001600160a01b03163b6107e55760405162461bcd60e51b815260206004820152602760248201527f4469616d6f6e64426173653a205245504c4143452074617267657420686173206044820152666e6f20636f646560c81b60648201526084016100a2565b60005b8160400151518110156109695760008260400151828151811061080d5761080d611082565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c806108885760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e640060448201526064016100a2565b6001600160a01b0381163014156108b15760405162461bcd60e51b81526004016100a29061120a565b84516001600160a01b038281169116141561091f5760405162461bcd60e51b815260206004820152602860248201527f4469616d6f6e64426173653a205245504c41434520746172676574206973206960448201526719195b9d1a58d85b60c21b60648201526084016100a2565b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166bffffffffffffffffffffffff919091161790556001016107e8565b505050565b805160009081906001600160a01b0316156109e35760405162461bcd60e51b815260206004820152602f60248201527f4469616d6f6e64426173653a2052454d4f564520746172676574206d7573742060448201526e6265207a65726f206164647265737360881b60648201526084016100a2565b600385901c6007861660005b856040015151811015610bec57600086604001518281518110610a1457610a14611082565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c610a8e5760405162461bcd60e51b815260206004820152601f60248201527f4469616d6f6e64426173653a2073656c6563746f72206e6f7420666f756e640060448201526064016100a2565b606081901c301415610ab25760405162461bcd60e51b81526004016100a29061120a565b88610ada57600019909401600081815260028c01602052604090205498509360079350610ae2565b600019909301925b600584901b89901b6000806001600160e01b031980841690861614610b39576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b16878214610b9c57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055610bc0565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b86610bdb57600088815260028f01602052604081208190559b505b5050600190930192506109ef915050565b5060039190911b1796939550929350505050565b8051156001600160a01b0383161514610c725760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e76616c696420696e697469616c697a617460448201526d696f6e20706172616d657465727360901b60648201526084016100a2565b6001600160a01b03821615610d6c576001600160a01b0382163014610cff576001600160a01b0382163b610cff5760405162461bcd60e51b815260206004820152602e60248201527f4469616d6f6e64426173653a20696e697469616c697a6174696f6e207461726760448201526d657420686173206e6f20636f646560901b60648201526084016100a2565b6000826001600160a01b031682604051610d19919061124c565b600060405180830381855af49150503d8060008114610d54576040519150601f19603f3d011682016040523d82523d6000602084013e610d59565b606091505b5050905080610969573d6000803e3d6000fd5b5050565b80356001600160e01b031981168114610d8857600080fd5b919050565b600060208284031215610d9f57600080fd5b6101e182610d70565b80356001600160a01b0381168114610d8857600080fd5b60008083601f840112610dd157600080fd5b50813567ffffffffffffffff811115610de957600080fd5b602083019150836020828501011115610e0157600080fd5b9250929050565b600080600080600060608688031215610e2057600080fd5b853567ffffffffffffffff80821115610e3857600080fd5b818801915088601f830112610e4c57600080fd5b813581811115610e5b57600080fd5b8960208260051b8501011115610e7057600080fd5b60208301975080965050610e8660208901610da8565b94506040880135915080821115610e9c57600080fd5b50610ea988828901610dbf565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610ef357610ef3610eba565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f2257610f22610eba565b604052919050565b600067ffffffffffffffff821115610f4457610f44610eba565b5060051b60200190565b6000610f61610f5c84610f2a565b610ef9565b83815260208082019190600586811b860136811115610f7f57600080fd5b865b8181101561107557803567ffffffffffffffff80821115610fa25760008081fd5b818a01915060608236031215610fb85760008081fd5b610fc0610ed0565b610fc983610da8565b81528683013560038110610fdd5760008081fd5b8188015260408381013583811115610ff55760008081fd5b939093019236601f85011261100c57600092508283fd5b8335925061101c610f5c84610f2a565b83815292871b840188019288810190368511156110395760008081fd5b948901945b8486101561105e5761104f86610d70565b8252948901949089019061103e565b918301919091525088525050948301948301610f81565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b838110156110c95781810151838201526020016110b1565b838111156110d8576000848401525b50505050565b600081518084526110f68160208601602086016110ae565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156111da57898403607f19018652815180516001600160a01b0316855283810151898601906003811061117957634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156111c55783516001600160e01b031916825292860192600192909201919086019061119b565b50978501979550505090820190600101611133565b50506001600160a01b038a169088015286810360408801526111fc81896110de565b9a9950505050505050505050565b60208082526022908201527f4469616d6f6e64426173653a2073656c6563746f7220697320696d6d757461626040820152616c6560f01b606082015260800190565b6000825161125e8184602087016110ae565b919091019291505056fea2646970667358221220777ec7b69c6ed5f794b1fbe916b840d3859718412f4809aeb2332e27cf23cf9964736f6c634300080a0033';

type DiamondCuttableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondCuttableMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondCuttableMock__factory extends ContractFactory {
  constructor(...args: DiamondCuttableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DiamondCuttableMock> {
    return super.deploy(overrides || {}) as Promise<DiamondCuttableMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondCuttableMock {
    return super.attach(address) as DiamondCuttableMock;
  }
  override connect(signer: Signer): DiamondCuttableMock__factory {
    return super.connect(signer) as DiamondCuttableMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondCuttableMockInterface {
    return new utils.Interface(_abi) as DiamondCuttableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DiamondCuttableMock {
    return new Contract(address, _abi, signerOrProvider) as DiamondCuttableMock;
  }
}
