/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  DiamondBaseStorage,
  DiamondBaseStorageInterface,
} from '../../../proxy/diamond/DiamondBaseStorage';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'target',
            type: 'address',
          },
          {
            internalType: 'enum IDiamondCuttable.FacetCutAction',
            name: 'action',
            type: 'uint8',
          },
          {
            internalType: 'bytes4[]',
            name: 'selectors',
            type: 'bytes4[]',
          },
        ],
        indexed: false,
        internalType: 'struct IDiamondCuttable.FacetCut[]',
        name: 'facetCuts',
        type: 'tuple[]',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'DiamondCut',
    type: 'event',
  },
];

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3099fdb7f42078c8e6b3d77b398930c332ff15a744dd8a1ee2a18679ba60d4464736f6c634300080a0033';

type DiamondBaseStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondBaseStorageConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondBaseStorage__factory extends ContractFactory {
  constructor(...args: DiamondBaseStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DiamondBaseStorage> {
    return super.deploy(overrides || {}) as Promise<DiamondBaseStorage>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DiamondBaseStorage {
    return super.attach(address) as DiamondBaseStorage;
  }
  override connect(signer: Signer): DiamondBaseStorage__factory {
    return super.connect(signer) as DiamondBaseStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondBaseStorageInterface {
    return new utils.Interface(_abi) as DiamondBaseStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DiamondBaseStorage {
    return new Contract(address, _abi, signerOrProvider) as DiamondBaseStorage;
  }
}
