/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { ProxyMock, ProxyMockInterface } from '../../proxy/ProxyMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'implementation',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161015b38038061015b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60c9806100926000396000f3fe60806040526000546001600160a01b0316803b60705760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f6044820152651b9d1c9858dd60d21b606482015260840160405180910390fd5b3660008037600080366000845af43d6000803e808015608e573d6000f35b3d6000fdfea26469706673582212209d6ac177af23f073c4cba6175b6e3f0e2d21816bf54e7a15ddb413f1dab1e40664736f6c634300080a0033';

type ProxyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyMock__factory extends ContractFactory {
  constructor(...args: ProxyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ProxyMock> {
    return super.deploy(implementation, overrides || {}) as Promise<ProxyMock>;
  }
  override getDeployTransaction(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(implementation, overrides || {});
  }
  override attach(address: string): ProxyMock {
    return super.attach(address) as ProxyMock;
  }
  override connect(signer: Signer): ProxyMock__factory {
    return super.connect(signer) as ProxyMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyMockInterface {
    return new utils.Interface(_abi) as ProxyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ProxyMock {
    return new Contract(address, _abi, signerOrProvider) as ProxyMock;
  }
}
