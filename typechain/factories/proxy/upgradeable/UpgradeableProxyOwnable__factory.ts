/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  UpgradeableProxyOwnable,
  UpgradeableProxyOwnableInterface,
} from '../../../proxy/upgradeable/UpgradeableProxyOwnable';
import type { Provider } from '@ethersproject/providers';
import { Contract, Signer, utils } from 'ethers';

const _abi = [
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'implementation',
        type: 'address',
      },
    ],
    name: 'setImplementation',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class UpgradeableProxyOwnable__factory {
  static readonly abi = _abi;
  static createInterface(): UpgradeableProxyOwnableInterface {
    return new utils.Interface(_abi) as UpgradeableProxyOwnableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): UpgradeableProxyOwnable {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as UpgradeableProxyOwnable;
  }
}
