/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  FactoryMock,
  FactoryMockInterface,
} from '../../factory/FactoryMock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'initCodeHash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32',
      },
    ],
    name: '__calculateDeploymentAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'initCode',
        type: 'bytes',
      },
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32',
      },
    ],
    name: '__deploy',
    outputs: [
      {
        internalType: 'address',
        name: 'deployment',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'initCode',
        type: 'bytes',
      },
    ],
    name: '__deploy',
    outputs: [
      {
        internalType: 'address',
        name: 'deployment',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610369806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630fe8dcf8146100465780633821254b146100755780633be472a714610088575b600080fd5b6100596100543660046101ec565b61009b565b6040516001600160a01b03909116815260200160405180910390f35b6100596100833660046102b1565b6100fc565b6100596100963660046102f6565b610108565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201849052605580830186905283518084039091018152607590920190925280519101206000905b90505b92915050565b60006100f38383610113565b60006100f682610180565b60008260200183518381836000f5925050506001600160a01b0381166100f65760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206661696c6564206465706c6f796d656e7400000000000060448201526064015b60405180910390fd5b600081602001825180826000f0925050506001600160a01b0381166101e75760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206661696c6564206465706c6f796d656e740000000000006044820152606401610177565b919050565b600080604083850312156101ff57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261023557600080fd5b813567ffffffffffffffff808211156102505761025061020e565b604051601f8301601f19908116603f011681019082821181831017156102785761027861020e565b8160405283815286602085880101111561029157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156102c457600080fd5b823567ffffffffffffffff8111156102db57600080fd5b6102e785828601610224565b95602094909401359450505050565b60006020828403121561030857600080fd5b813567ffffffffffffffff81111561031f57600080fd5b61032b84828501610224565b94935050505056fea26469706673582212205e651e24d57af20dacb9859a3cda317fcd9baf28f0168ceb708ebafb21e0446d64736f6c634300080a0033';

type FactoryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryMockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FactoryMock__factory extends ContractFactory {
  constructor(...args: FactoryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<FactoryMock> {
    return super.deploy(overrides || {}) as Promise<FactoryMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FactoryMock {
    return super.attach(address) as FactoryMock;
  }
  override connect(signer: Signer): FactoryMock__factory {
    return super.connect(signer) as FactoryMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryMockInterface {
    return new utils.Interface(_abi) as FactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): FactoryMock {
    return new Contract(address, _abi, signerOrProvider) as FactoryMock;
  }
}
