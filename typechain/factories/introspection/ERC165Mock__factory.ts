/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC165Mock,
  ERC165MockInterface,
} from '../../introspection/ERC165Mock';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506100436301ffc9a760e01b600161003061004860201b61008c1760201c565b61006c60201b6100b0179092919060201c565b6100f8565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b031980831614156100ca5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6101a3806101076000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004361003e36600461013c565b610057565b604051901515815260200160405180910390f35b60006100868261006561008c565b906001600160e01b0319166000908152602091909152604090205460ff1690565b92915050565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b0319808316141561010e5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b60006020828403121561014e57600080fd5b81356001600160e01b03198116811461016657600080fd5b939250505056fea2646970667358221220a9a29ec705ae20bacfe76c5c9baaee537709af143646082ba1bb7f7abb86d5b564736f6c634300080a0033';

type ERC165MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165MockConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165Mock__factory extends ContractFactory {
  constructor(...args: ERC165MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC165Mock> {
    return super.deploy(overrides || {}) as Promise<ERC165Mock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC165Mock {
    return super.attach(address) as ERC165Mock;
  }
  override connect(signer: Signer): ERC165Mock__factory {
    return super.connect(signer) as ERC165Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165MockInterface {
    return new utils.Interface(_abi) as ERC165MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ERC165Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC165Mock;
  }
}
