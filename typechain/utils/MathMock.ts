/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface MathMockInterface extends utils.Interface {
  functions: {
    'average(uint256,uint256)': FunctionFragment;
    'sqrt(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'average'
      | 'average(uint256,uint256)'
      | 'sqrt'
      | 'sqrt(uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'average',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'average(uint256,uint256)',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'sqrt', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'sqrt(uint256)',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'average', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'average(uint256,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sqrt', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sqrt(uint256)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MathMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MathMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'average(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'sqrt(uint256)'(
      x: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  average(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'average(uint256,uint256)'(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'sqrt(uint256)'(
    x: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'average(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'sqrt(uint256)'(
      x: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'average(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'sqrt(uint256)'(
      x: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    average(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'average(uint256,uint256)'(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'sqrt(uint256)'(
      x: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
