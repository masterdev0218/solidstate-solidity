/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface ReentrancyGuardMockInterface extends utils.Interface {
  functions: {
    'crossFunctionReentrancyTest()': FunctionFragment;
    'nonReentrancyTest()': FunctionFragment;
    'reentrancyTest()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'crossFunctionReentrancyTest'
      | 'crossFunctionReentrancyTest()'
      | 'nonReentrancyTest'
      | 'nonReentrancyTest()'
      | 'reentrancyTest'
      | 'reentrancyTest()',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'crossFunctionReentrancyTest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'crossFunctionReentrancyTest()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nonReentrancyTest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nonReentrancyTest()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'reentrancyTest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'reentrancyTest()',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'crossFunctionReentrancyTest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'crossFunctionReentrancyTest()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nonReentrancyTest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nonReentrancyTest()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reentrancyTest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reentrancyTest()',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ReentrancyGuardMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReentrancyGuardMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    crossFunctionReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'crossFunctionReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nonReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'nonReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'reentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  crossFunctionReentrancyTest(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'crossFunctionReentrancyTest()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nonReentrancyTest(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'nonReentrancyTest()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reentrancyTest(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'reentrancyTest()'(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    crossFunctionReentrancyTest(overrides?: CallOverrides): Promise<void>;

    'crossFunctionReentrancyTest()'(overrides?: CallOverrides): Promise<void>;

    nonReentrancyTest(overrides?: CallOverrides): Promise<void>;

    'nonReentrancyTest()'(overrides?: CallOverrides): Promise<void>;

    reentrancyTest(overrides?: CallOverrides): Promise<void>;

    'reentrancyTest()'(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    crossFunctionReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'crossFunctionReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nonReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'nonReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'reentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    crossFunctionReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'crossFunctionReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nonReentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'nonReentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reentrancyTest(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'reentrancyTest()'(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
