/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface MulticallMockInterface extends utils.Interface {
  functions: {
    'callRevertTest()': FunctionFragment;
    'callTest()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'callRevertTest'
      | 'callRevertTest()'
      | 'callTest'
      | 'callTest()'
      | 'multicall'
      | 'multicall(bytes[])',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'callRevertTest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'callRevertTest()',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'callTest', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'callTest()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall(bytes[])',
    values: [BytesLike[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'callRevertTest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'callRevertTest()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'callTest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callTest()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'multicall(bytes[])',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MulticallMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MulticallMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callRevertTest(overrides?: CallOverrides): Promise<[void]>;

    'callRevertTest()'(overrides?: CallOverrides): Promise<[void]>;

    callTest(overrides?: CallOverrides): Promise<[BigNumber]>;

    'callTest()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  callRevertTest(overrides?: CallOverrides): Promise<void>;

  'callRevertTest()'(overrides?: CallOverrides): Promise<void>;

  callTest(overrides?: CallOverrides): Promise<BigNumber>;

  'callTest()'(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'multicall(bytes[])'(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    callRevertTest(overrides?: CallOverrides): Promise<void>;

    'callRevertTest()'(overrides?: CallOverrides): Promise<void>;

    callTest(overrides?: CallOverrides): Promise<BigNumber>;

    'callTest()'(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    callRevertTest(overrides?: CallOverrides): Promise<BigNumber>;

    'callRevertTest()'(overrides?: CallOverrides): Promise<BigNumber>;

    callTest(overrides?: CallOverrides): Promise<BigNumber>;

    'callTest()'(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callRevertTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'callRevertTest()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    callTest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'callTest()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'multicall(bytes[])'(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
