/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface ArrayUtilsMockInterface extends utils.Interface {
  functions: {
    'max(uint256[])': FunctionFragment;
    'max(bytes32[])': FunctionFragment;
    'max(address[])': FunctionFragment;
    'min(bytes32[])': FunctionFragment;
    'min(address[])': FunctionFragment;
    'min(uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'max(uint256[])'
      | 'max(bytes32[])'
      | 'max(address[])'
      | 'min(bytes32[])'
      | 'min(address[])'
      | 'min(uint256[])',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'max(uint256[])',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'max(bytes32[])',
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'max(address[])',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'min(bytes32[])',
    values: [BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'min(address[])',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'min(uint256[])',
    values: [BigNumberish[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'max(uint256[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'max(bytes32[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'max(address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'min(bytes32[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'min(address[])',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'min(uint256[])',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ArrayUtilsMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArrayUtilsMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'max(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'max(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'max(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'min(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'min(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'min(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  'max(uint256[])'(
    array: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'max(bytes32[])'(
    array: BytesLike[],
    overrides?: CallOverrides,
  ): Promise<string>;

  'max(address[])'(array: string[], overrides?: CallOverrides): Promise<string>;

  'min(bytes32[])'(
    array: BytesLike[],
    overrides?: CallOverrides,
  ): Promise<string>;

  'min(address[])'(array: string[], overrides?: CallOverrides): Promise<string>;

  'min(uint256[])'(
    array: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    'max(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'max(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'max(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'min(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'min(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<string>;

    'min(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    'max(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'max(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'max(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'min(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'min(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'min(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'max(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'max(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'max(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'min(bytes32[])'(
      array: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'min(address[])'(
      array: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'min(uint256[])'(
      array: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
