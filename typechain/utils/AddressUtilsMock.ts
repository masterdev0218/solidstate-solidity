/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface AddressUtilsMockInterface extends utils.Interface {
  functions: {
    'functionCall(address,bytes,string)': FunctionFragment;
    'functionCall(address,bytes)': FunctionFragment;
    'functionCallWithValue(address,bytes,uint256)': FunctionFragment;
    'functionCallWithValue(address,bytes,uint256,string)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'sendValue(address,uint256)': FunctionFragment;
    'toString(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'functionCall(address,bytes,string)'
      | 'functionCall(address,bytes)'
      | 'functionCallWithValue(address,bytes,uint256)'
      | 'functionCallWithValue(address,bytes,uint256,string)'
      | 'isContract'
      | 'isContract(address)'
      | 'sendValue'
      | 'sendValue(address,uint256)'
      | 'toString'
      | 'toString(address)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'functionCall(address,bytes,string)',
    values: [string, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'functionCall(address,bytes)',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'functionCallWithValue(address,bytes,uint256)',
    values: [string, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'functionCallWithValue(address,bytes,uint256,string)',
    values: [string, BytesLike, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isContract(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendValue',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendValue(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'toString', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'toString(address)',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'functionCall(address,bytes,string)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'functionCall(address,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'functionCallWithValue(address,bytes,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'functionCallWithValue(address,bytes,uint256,string)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isContract(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sendValue', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'sendValue(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'toString', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'toString(address)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface AddressUtilsMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddressUtilsMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'functionCall(address,bytes,string)'(
      target: string,
      data: BytesLike,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'functionCall(address,bytes)'(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'functionCallWithValue(address,bytes,uint256)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'functionCallWithValue(address,bytes,uint256,string)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isContract(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isContract(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    sendValue(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'sendValue(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    toString(account: string, overrides?: CallOverrides): Promise<[string]>;

    'toString(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  'functionCall(address,bytes,string)'(
    target: string,
    data: BytesLike,
    error: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'functionCall(address,bytes)'(
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'functionCallWithValue(address,bytes,uint256)'(
    target: string,
    data: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'functionCallWithValue(address,bytes,uint256,string)'(
    target: string,
    data: BytesLike,
    value: BigNumberish,
    error: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isContract(account: string, overrides?: CallOverrides): Promise<boolean>;

  'isContract(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  sendValue(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'sendValue(address,uint256)'(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  toString(account: string, overrides?: CallOverrides): Promise<string>;

  'toString(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    'functionCall(address,bytes,string)'(
      target: string,
      data: BytesLike,
      error: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    'functionCall(address,bytes)'(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'functionCallWithValue(address,bytes,uint256)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'functionCallWithValue(address,bytes,uint256,string)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      error: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    isContract(account: string, overrides?: CallOverrides): Promise<boolean>;

    'isContract(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    sendValue(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'sendValue(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    toString(account: string, overrides?: CallOverrides): Promise<string>;

    'toString(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    'functionCall(address,bytes,string)'(
      target: string,
      data: BytesLike,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'functionCall(address,bytes)'(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'functionCallWithValue(address,bytes,uint256)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'functionCallWithValue(address,bytes,uint256,string)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isContract(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isContract(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sendValue(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'sendValue(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    toString(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'toString(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'functionCall(address,bytes,string)'(
      target: string,
      data: BytesLike,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'functionCall(address,bytes)'(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'functionCallWithValue(address,bytes,uint256)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'functionCallWithValue(address,bytes,uint256,string)'(
      target: string,
      data: BytesLike,
      value: BigNumberish,
      error: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isContract(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'isContract(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sendValue(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'sendValue(address,uint256)'(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    toString(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'toString(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
