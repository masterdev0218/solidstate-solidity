/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface ECDSAMockInterface extends utils.Interface {
  functions: {
    'recover(bytes32,bytes)': FunctionFragment;
    'recover(bytes32,uint8,bytes32,bytes32)': FunctionFragment;
    'toEthSignedMessageHash(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'recover(bytes32,bytes)'
      | 'recover(bytes32,uint8,bytes32,bytes32)'
      | 'toEthSignedMessageHash'
      | 'toEthSignedMessageHash(bytes32)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'recover(bytes32,bytes)',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'recover(bytes32,uint8,bytes32,bytes32)',
    values: [BytesLike, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'toEthSignedMessageHash',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'toEthSignedMessageHash(bytes32)',
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: 'recover(bytes32,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'recover(bytes32,uint8,bytes32,bytes32)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toEthSignedMessageHash',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'toEthSignedMessageHash(bytes32)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ECDSAMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ECDSAMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'recover(bytes32,bytes)'(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'recover(bytes32,uint8,bytes32,bytes32)'(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'toEthSignedMessageHash(bytes32)'(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  'recover(bytes32,bytes)'(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'recover(bytes32,uint8,bytes32,bytes32)'(
    hash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  toEthSignedMessageHash(
    hash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  'toEthSignedMessageHash(bytes32)'(
    hash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    'recover(bytes32,bytes)'(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'recover(bytes32,uint8,bytes32,bytes32)'(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    'toEthSignedMessageHash(bytes32)'(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    'recover(bytes32,bytes)'(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'recover(bytes32,uint8,bytes32,bytes32)'(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'toEthSignedMessageHash(bytes32)'(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    'recover(bytes32,bytes)'(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'recover(bytes32,uint8,bytes32,bytes32)'(
      hash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    toEthSignedMessageHash(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'toEthSignedMessageHash(bytes32)'(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
