/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface IERC1155EnumerableInterface extends utils.Interface {
  functions: {
    'accountsByToken(uint256)': FunctionFragment;
    'tokensByAccount(address)': FunctionFragment;
    'totalHolders(uint256)': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountsByToken'
      | 'accountsByToken(uint256)'
      | 'tokensByAccount'
      | 'tokensByAccount(address)'
      | 'totalHolders'
      | 'totalHolders(uint256)'
      | 'totalSupply'
      | 'totalSupply(uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'accountsByToken',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'accountsByToken(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokensByAccount',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokensByAccount(address)',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalHolders',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalHolders(uint256)',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply(uint256)',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'accountsByToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'accountsByToken(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokensByAccount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tokensByAccount(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalHolders',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalHolders(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply(uint256)',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface IERC1155Enumerable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1155EnumerableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountsByToken(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    'accountsByToken(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    tokensByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    'tokensByAccount(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    totalHolders(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'totalHolders(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'totalSupply(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  accountsByToken(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  'accountsByToken(uint256)'(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  tokensByAccount(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  'tokensByAccount(address)'(
    account: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  totalHolders(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'totalHolders(uint256)'(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply(uint256)'(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    accountsByToken(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    'accountsByToken(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    tokensByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    'tokensByAccount(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    totalHolders(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalHolders(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupply(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accountsByToken(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'accountsByToken(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokensByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'tokensByAccount(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalHolders(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalHolders(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupply(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountsByToken(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'accountsByToken(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokensByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'tokensByAccount(address)'(
      account: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalHolders(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'totalHolders(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'totalSupply(uint256)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
