/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../common';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

export interface ERC20SnapshotInterface extends utils.Interface {
  functions: {
    'balanceOfAt(address,uint256)': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOfAt'
      | 'balanceOfAt(address,uint256)'
      | 'totalSupplyAt'
      | 'totalSupplyAt(uint256)',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'balanceOfAt',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfAt(address,uint256)',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupplyAt(uint256)',
    values: [BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'balanceOfAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfAt(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt(uint256)',
    data: BytesLike,
  ): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Snapshot(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Approval(address,address,uint256)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Snapshot(uint256)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'Transfer(address,address,uint256)',
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface SnapshotEventObject {
  id: BigNumber;
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>;

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC20Snapshot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20SnapshotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'balanceOfAt(address,uint256)'(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'totalSupplyAt(uint256)'(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  balanceOfAt(
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'balanceOfAt(address,uint256)'(
    account: string,
    snapshotId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupplyAt(
    snapshotId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'totalSupplyAt(uint256)'(
    snapshotId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOfAt(address,uint256)'(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupplyAt(uint256)'(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'Snapshot(uint256)'(id?: null): SnapshotEventFilter;
    Snapshot(id?: null): SnapshotEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOfAt(address,uint256)'(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupplyAt(uint256)'(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfAt(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOfAt(address,uint256)'(
      account: string,
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'totalSupplyAt(uint256)'(
      snapshotId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
